@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using Chinook.ClientModels
@using Chinook.Interfaces
@using Chinook.Repositories

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <input type="text" name=“search” size="50" maxlength="45" @bind="inputText" @onkeydown="@HandleKeyPress" />
    <button type="button" @onclick="@SearchClick">Search</button>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistViewModel> Artists;
    private List<PlayListViewModel> PlayLists;
    [Inject] IArtistRepository ArtistRepository { get; set; }
    [Inject] IPlayListRepository PlayListRepository { get; set; }
    private string inputText = "";

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await ArtistRepository.GetArtistsAsync();
        PlayLists = await PlayListRepository.GetPlayListAsync();
        if (!PlayLists.Any(x => x.Name.Contains("My favorite tracks")))
        {
            PlayListRepository.AddPlayListAsync(new PlayListViewModel{Name = "My favorite tracks"});
        }
    }

    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            string enteredText = inputText;
            Artists = await  ArtistRepository.GetArtistsAsync(enteredText);
            inputText = "";
        }
    }

    private async Task SearchClick()
    {
        string enteredText = inputText;
        Artists = await  ArtistRepository.GetArtistsAsync(enteredText);
    }

    //public async Task<List<Artist>> GetArtists()
    //{   
    //    var dbContext = await DbFactory.CreateDbContextAsync();
    //    var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();
        
    //    return dbContext.Artists.ToList();
    //}

    //public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    //{
    //    var dbContext = await DbFactory.CreateDbContextAsync();
    //    return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    //}
}
