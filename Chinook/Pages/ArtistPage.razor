@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.Interfaces

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
        <tr>
            <th>Album title</th>
            <th>Track name</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var track in Tracks)
        {
            <tr>
                <td>@track.Album.Title</td>
                <td>@track.Name</td>
                <td>
                    @if (track.IsFavorite)
                    {
                          <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                    }
                    else
                    {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                    }
                    <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                </td>
            </tr>
        }
        </tbody>
           
        </table>

}

@code {

    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    //[Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IArtistRepository ArtistRepository { get; set; }
    [Inject] ITrackRepository TrackRepository { get; set; }
    [Inject] IPlayListRepository PlayListRepository { get; set; }

    private Modal PlaylistDialog { get; set; }
    private ArtistViewModel Artist;
    private List<TrackViewModel> Tracks;
    private TrackViewModel SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    
    private List<PlayListViewModel> UserPlayList;
    string playListName;


    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        
        Artist = await ArtistRepository.GetArtistById(ArtistId); 
        Tracks = await TrackRepository.GetTracksByArtistId(ArtistId);
        UserPlayList = await PlayListRepository.GetPlayListByUserIdAsync(CurrentUserId);

    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.Album.Title} - {SelectedTrack.Name} added to playlist {{playlist name}}.";
        PlayListViewModel playListViewModel = new PlayListViewModel(){Name = playListName};
        playListViewModel.UserPlayLists.Add(new UserPlayListModel(){  UserId = CurrentUserId});
        PlayListRepository.AddPlayListAsync(playListViewModel);
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.Album.Title - @SelectedTrack.Name</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist">
                @foreach (var playListView in UserPlayList)
                {
                    <option value="@playListView.PlaylistId">@playListView.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" @bind="playListName" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>


